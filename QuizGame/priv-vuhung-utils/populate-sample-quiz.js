// Script to populate the Firebase database with quizzes generated by Gemini AI
import { initializeApp } from 'firebase/app';
import { getDatabase, ref, push, set, serverTimestamp, get } from 'firebase/database';
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as dotenv from 'dotenv';
import * as path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name using ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables from .env.local
dotenv.config({ path: path.resolve(__dirname, '../.env.local') });

// Firebase configuration
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

// Initialize the Gemini API with the API key from environment variables
const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY);

// List of categories
const categories = [
  'General Knowledge',
  'HSC',
  'Science & Technology',
  'History',
  'Maths',
  'Writing',
  'Geography',
  'Pop Culture',
  'Sports',
  'Arts & Literature',
  'Food & Drink'
];

// Sleep function to add delay between API calls
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * Generates quiz questions using Gemini API based on a description
 * @param {string} description - The description of the quiz to generate
 * @param {number} numQuestions - The number of questions to generate (default: 10)
 * @param {number} retryCount - Number of retries (default: 3)
 * @returns {Promise<Array>} - Array of quiz questions with options and correct answers
 */
const generateQuizWithAI = async (description, numQuestions = 10, retryCount = 3) => {
  try {
    // Get the generative model
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    
    // Create the prompt for the API
    const prompt = `Create a quiz about "${description}" with ${numQuestions} multiple-choice questions.
      Each question must have exactly 4 answer options.
      Format each question as a JSON object with the following structure:
      {
        "question": "Question text",
        "options": ["Option A", "Option B", "Option C", "Option D"],
        "correctAnswer": "The correct option text"
      }
      
      Return the response as a valid JSON array of these question objects. Do not include any explanations or additional text outside the JSON array.`;

    // Generate content from the model
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    // Extract the JSON array from the response
    const jsonMatch = text.match(/\[\s*\{.*\}\s*\]/s);
    if (!jsonMatch) {
      throw new Error("Could not extract valid JSON from the response");
    }
    
    const jsonString = jsonMatch[0];
    const questions = JSON.parse(jsonString);
    
    return questions;
  } catch (error) {
    if (error.toString().includes("429") && retryCount > 0) {
      // Rate limit error - wait and retry
      console.log(`Rate limit hit. Waiting 60 seconds before retry. Retries left: ${retryCount}`);
      await sleep(60000); // Wait 60 seconds
      return generateQuizWithAI(description, numQuestions, retryCount - 1);
    }
    
    console.error("Error generating quiz with AI:", error);
    
    // If we can't get AI-generated content, create some generic questions
    if (retryCount <= 0) {
      console.log("Using fallback generic questions instead");
      return generateGenericQuestions(description);
    }
    
    throw error;
  }
};

/**
 * Generate generic questions as a fallback
 * @param {string} topic - The topic for the questions
 * @returns {Array} - Array of generic questions
 */
const generateGenericQuestions = (topic) => {
  const questions = [];
  
  // Generate 10 generic questions
  for (let i = 1; i <= 10; i++) {
    questions.push({
      question: `Question ${i} about ${topic}?`,
      options: ["Option A", "Option B", "Option C", "Option D"],
      correctAnswer: "Option A"
    });
  }
  
  return questions;
};

/**
 * Creates an answer in Firebase
 * @param {string} answerText - The text of the answer
 * @param {boolean} isCorrect - Whether this is the correct answer
 * @returns {Promise<string>} - The ID of the created answer
 */
const createAnswer = async (answerText, isCorrect) => {
  try {
    const answersRef = ref(database, 'answers');
    const newAnswerRef = push(answersRef);
    const answerId = newAnswerRef.key;
    
    await set(newAnswerRef, {
      answer: answerText,
      isCorrect: isCorrect
    });
    
    return answerId;
  } catch (error) {
    console.error("Error creating answer:", error);
    throw error;
  }
};

/**
 * Creates a question with its answers in Firebase
 * @param {Object} questionData - The question data
 * @returns {Promise<string>} - The ID of the created question
 */
const createQuestion = async (questionData) => {
  try {
    // Create answers for this question
    const answerPromises = questionData.options.map(async (option) => {
      const isCorrect = option === questionData.correctAnswer;
      return await createAnswer(option, isCorrect);
    });
    
    const answerIds = await Promise.all(answerPromises);
    
    // Create the question with references to answers
    const questionsRef = ref(database, 'questions');
    const newQuestionRef = push(questionsRef);
    const questionId = newQuestionRef.key;
    
    await set(newQuestionRef, {
      question: questionData.question,
      answers: answerIds
    });
    
    return questionId;
  } catch (error) {
    console.error("Error creating question:", error);
    throw error;
  }
};

/**
 * Creates a quiz with its questions in Firebase
 * @param {string} title - The title of the quiz
 * @param {string} category - The category of the quiz
 * @param {Array} questionIds - Array of question IDs
 * @returns {Promise<string>} - The ID of the created quiz
 */
const createQuiz = async (title, category, description, questionIds) => {
  try {
    const quizzesRef = ref(database, 'quizzes');
    const newQuizRef = push(quizzesRef);
    const quizId = newQuizRef.key;
    
    // Use default quiz image for all quizzes
    const coverImage = '/images/default-quiz.jpg';
    
    await set(newQuizRef, {
      title,
      description,
      coverImage,
      category,
      tags: [category.toLowerCase()],
      questions: questionIds,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      statistics: {
        played: 0,
        lastPlayed: null
      },
      userId: process.env.NEXT_PUBLIC_ADMIN_EMAIL // Use admin email as creator
    });
    
    return quizId;
  } catch (error) {
    console.error("Error creating quiz:", error);
    throw error;
  }
};

/**
 * Generates a quiz title based on category and index
 * @param {string} category - The category of the quiz
 * @param {number} index - The index of the quiz within the category
 * @returns {string} - A generated quiz title
 */
const generateQuizTitle = (category, index) => {
  const titles = {
    'General Knowledge': [
      'Ultimate General Knowledge Challenge',
      'General Knowledge Mastermind',
      'Know-It-All Quiz',
      'Everyday Knowledge Test',
      'Common Knowledge Challenge',
      'General Knowledge Champion',
      'The Knowledge Quest',
      'Facts and Figures Quiz',
      'Knowledge Roundup',
      'Brain Power Challenge'
    ],
    'HSC': [
      'HSC Exam Prep Quiz',
      'HSC Knowledge Check',
      'High School Certificate Challenge',
      'HSC Subject Mastery',
      'HSC Study Quiz',
      'Pre-Exam HSC Test',
      'HSC Academic Challenge',
      'HSC Fundamentals',
      'HSC Knowledge Builder',
      'HSC Comprehensive Review'
    ],
    'Science & Technology': [
      'Science & Tech Explorer',
      'Technology Through Time',
      'Science Wonders Quiz',
      'Tech Innovation Challenge',
      'Scientific Discovery Quiz',
      'Digital World Quiz',
      'Science Fact or Fiction',
      'Tech Giants Challenge',
      'Scientific Breakthroughs',
      'Future Technology Quiz'
    ],
    'History': [
      'Historical Timeline Challenge',
      'World History Quiz',
      'Ancient Civilizations Test',
      'Modern History Challenge',
      'Historical Figures Quiz',
      'War and Peace Through History',
      'Cultural History Quiz',
      'History Mysteries',
      'Revolutionary Events Quiz',
      'History of Nations'
    ],
    'Maths': [
      'Number Cruncher Challenge',
      'Mathematical Puzzlers',
      'Algebra and Beyond',
      'Geometry Challenge',
      'Math Masters Quiz',
      'Calculation Nation',
      'Mathematical Concepts Test',
      'Numbers and Patterns Quiz',
      'Logic and Math Challenge',
      'Math Problems Solved'
    ],
    'Writing': [
      'Grammar and Punctuation Quiz',
      'Creative Writing Challenge',
      'Writing Styles and Techniques',
      'Literary Devices Test',
      'Professional Writing Quiz',
      'Vocabulary Builder',
      'Language Elements Challenge',
      'Poetry and Prose Quiz',
      'Writing Fundamentals',
      "Author's Toolbox Quiz"
    ],
    'Geography': [
      'World Capitals Challenge',
      'Global Geography Quiz',
      'Countries and Continents',
      'Physical Geography Test',
      'Map Reading Challenge',
      'Geographical Features Quiz',
      'Climate and Weather Test',
      'Natural Wonders of the World',
      'Cultural Geography Quiz',
      'Political Geography Challenge'
    ],
    'Pop Culture': [
      'Celebrity Quiz',
      'Movie Buffs Challenge',
      'Music Through the Decades',
      'TV Shows Trivia',
      'Social Media Trends Quiz',
      'Pop Culture Icons',
      'Entertainment Industry Test',
      'Fashion and Style Quiz',
      'Cultural Phenomena Challenge',
      'Latest Trends Quiz'
    ],
    'Sports': [
      'Sports Champions Quiz',
      'Olympic Games Challenge',
      'Ball Sports Trivia',
      'Sports History Test',
      'Athletic Achievements Quiz',
      'Team Sports Challenge',
      'Individual Sports Test',
      'Sports Rules and Regulations',
      'Sporting Events Around the World',
      'Legendary Athletes Quiz'
    ],
    'Arts & Literature': [
      'Classic Literature Quiz',
      'Famous Artists Challenge',
      'Literary Movements Test',
      'Art History Through Time',
      'Poetry Masters Quiz',
      'Artistic Styles Challenge',
      'World Literature Test',
      'Paintings and Sculptures Quiz',
      'Authors and Their Works',
      'Modern Art Movements'
    ],
    'Food & Drink': [
      'Culinary Skills Quiz',
      'International Cuisines Challenge',
      'Beverage Connoisseur Test',
      'Food Origins Quiz',
      'Cooking Techniques Challenge',
      'Dietary Knowledge Test',
      'Famous Chefs Quiz',
      'Food Science Challenge',
      'Wine and Spirits Test',
      'Food Culture Around the World'
    ]
  };
  
  return titles[category][index] || `${category} Quiz ${index + 1}`;
};

/**
 * Generates a quiz description based on category and index
 * @param {string} category - The category of the quiz
 * @param {number} index - The index of the quiz within the category
 * @returns {string} - A generated quiz description
 */
const generateQuizDescription = (category, index, title) => {
  return `Test your knowledge of ${category} with this challenging quiz: ${title}. Features 10 carefully selected questions to test your expertise.`;
};

/**
 * Populates the database with quizzes for all categories
 */
const populateQuizzes = async () => {
  try {
    console.log("Starting quiz generation and database population...");
    
    // Check if there are any existing quizzes to determine where to start
    const quizzesRef = ref(database, 'quizzes');
    const snapshot = await get(quizzesRef);
    const existingQuizzes = snapshot.exists() ? Object.values(snapshot.val()) : [];
    
    // Count existing quizzes by category
    const quizCountByCategory = {};
    categories.forEach(category => {
      quizCountByCategory[category] = existingQuizzes.filter(q => q.category === category).length;
    });
    
    console.log("Existing quiz counts by category:", quizCountByCategory);
    
    for (const category of categories) {
      const existingCount = quizCountByCategory[category] || 0;
      const numToCreate = Math.max(0, 10 - existingCount);
      
      if (numToCreate === 0) {
        console.log(`\nSkipping category ${category} - already has 10 or more quizzes`);
        continue;
      }
      
      console.log(`\nGenerating ${numToCreate} quizzes for category: ${category}`);
      
      for (let i = 0; i < numToCreate; i++) {
        const title = generateQuizTitle(category, i + existingCount);
        const description = generateQuizDescription(category, i + existingCount, title);
        
        console.log(`\nCreating quiz ${i + 1}/${numToCreate}: ${title}`);
        console.log("Generating questions with Gemini AI...");
        
        // Generate questions with Gemini AI
        const questionsData = await generateQuizWithAI(`${category}: ${title}`, 10);
        
        // Add a delay between API calls to avoid rate limits
        await sleep(5000); // Wait 5 seconds between quiz generation
        
        // Create questions with answers in Firebase
        console.log("Creating questions and answers in database...");
        const questionPromises = questionsData.map(async (questionData) => {
          return await createQuestion(questionData);
        });
        
        const questionIds = await Promise.all(questionPromises);
        
        // Create the quiz with references to questions
        console.log("Creating quiz in database...");
        const quizId = await createQuiz(title, category, description, questionIds);
        
        console.log(`✅ Quiz created with ID: ${quizId}`);
      }
      
      console.log(`✅ All quizzes created for category: ${category}`);
    }
    
    console.log("\n🎉 Database population complete!");
  } catch (error) {
    console.error("Error populating quizzes:", error);
  }
};

// Execute the quiz generation and database population
populateQuizzes();